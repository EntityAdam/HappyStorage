@using System.Reflection;
@using System.ComponentModel.DataAnnotations;
@using System.Linq.Expressions;

<label class="@(@class)">@displayAttributeName</label>

@functions {
    private string displayAttributeName;

    [Parameter]
    private object viewModel { get; set; }

    [Parameter]
    private string property { get; set; }

    [Parameter]
    private Expression<Func<object>> labelFor { get; set; }

    [Parameter]
    private string @class { get; set; }

    protected override void OnInit()
    {
        var member = labelFor.Body as MemberExpression;
        var unary = labelFor.Body as UnaryExpression;
        var memberExp = member ?? (unary != null ? unary.Operand as MemberExpression : null);
        PropertyInfo propInfo = memberExp.Member as PropertyInfo;
        var attribute = propInfo.GetCustomAttributes(typeof(DisplayAttribute), true).Cast<DisplayAttribute>().SingleOrDefault();
        displayAttributeName = attribute?.ShortName ?? attribute?.Name ?? propInfo.Name;
    }
}