@page "/customers"
@inject HappyStorage.Common.Ui.Customers.ICustomerListViewModel viewModel;
@inject Microsoft.AspNetCore.Components.IUriHelper UriHelper;

<h1>Customers</h1>
<div>
    <button class="btn btn-primary" onclick="@CreateCustomer">New Customer</button>
</div>

@if (viewModel.Customers.Any())
{
    <br />
    <div class="row">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"><label asp-for="@viewModel.Customers[0].CustomerNumber"></label></th>
                    <th scope="col"><label asp-for="@viewModel.Customers[0].FullName"></label></th>
                    <th scope="col"></th>
                </tr>
            </thead>

            @foreach (var customer in viewModel.Customers)
            {
                <tr>
                    <th scope="row">@customer.CustomerNumber</th>
                    <td>@customer.FullName</td>
                    <td>
                        <a asp-page="/Tenant/ListUnits" asp-route-customerNumber="@customer.CustomerNumber" class="btn btn-sm btn-primary">Manage Units</a>
                        <a asp-page="/Tenant/Payment" asp-route-customerNumber="@customer.CustomerNumber" class="btn btn-sm btn-info">Make a Payment</a>
                        <a asp-page="/Customer/Delete" asp-route-customerNumber="@customer.CustomerNumber" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>
            }
        </table>
        @if (viewModel.PrevCommand.CanExecute())
        {
            <button class="btn btn-primary" onclick="@PrevPage">Prev</button>
        }
        @if (viewModel.NextCommand.CanExecute())
        {
            <button class="btn btn-primary" onclick="@NextPage">Next</button>
        }
    </div>

}

@functions {


    protected override async Task OnInitAsync()
    {
        viewModel.Load();
    }

    protected void CreateCustomer()
    {
        UriHelper.NavigateTo("/customer/create");
    }

    protected void NextPage()
    {
        viewModel.NextCommand.Execute();
    }

    protected void PrevPage()
    {
        viewModel.PrevCommand.Execute();
    }
}